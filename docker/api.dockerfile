# Inicia com a imagem do golang
FROM golang:alpine as builder 

# Instala√ß√£o do git, o git √© necess√°rio para buscar os arquivos de depend√™ncias.
RUN apk update && apk add --no-cache git

# Informa o diret√≥rio que ser√° utilizado no container
WORKDIR /app

# Copia os arquivos go.mod e go.sum 
COPY go.mod go.sum ./

# Baixa todas as depend√™ncias. As depend√™ncias ser√£o armazenadas em cache se os arquivos go.mod e go.sum n√£o forem alterados
RUN go mod download 

# Copia os arquivos do diret√≥rio atual para o diret√≥rio especificado do container
COPY . .

# Copia o aplicativo do go
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

# Inicia um novo est√°gio
FROM alpine:latest
RUN apk --no-cache add ca-certificates

WORKDIR /root/

# Copia o arquivo bin√°rio pr√©-constru√≠do do est√°gio anterior. Observe que tamb√©m copiamos o arquivo .env
COPY --from=builder /app/main .
COPY --from=builder /app/.env . 

# Precisa tanto do dockerize como do wait para que a aplica√ß√£o espere a execu√ß√£o do banco, excencial para utiliza√ß√£o de migrations
ENV DOCKERIZE_VERSION v0.6.1
RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz

ENV WAIT_VERSION 2.7.2
ADD https://github.com/ufoscout/docker-compose-wait/releases/download/$WAIT_VERSION/wait /wait
RUN chmod +x /wait

# A porta de ecesso a aplica√ß√£o
EXPOSE 3000

# Comando para execu√ß√£o da aplica√ß√£o üò¢
CMD ["./main"]